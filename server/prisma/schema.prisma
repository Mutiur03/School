generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String @default("admin")
}

model students {
  id           Int      @id @default(autoincrement())
  login_id     Int      @unique
  name         String   @db.VarChar(100)
  father_name  String?  @db.VarChar(100)
  mother_name  String?  @db.VarChar(100)
  phone        String?  @db.Char(11)
  parent_phone String?  @db.Char(11)
  batch        String   @db.Char(4)
  address      String?
  dob          String?  @db.VarChar(10)
  blood_group  String?  @db.VarChar(10)
  has_stipend  Boolean  @default(false)
  image        String?
  password     String?  @db.VarChar(100)
  available    Boolean  @default(true)
  created_at   DateTime @default(now())

  enrollments student_enrollments[]
  attendances attendence[]
  gpa         gpa?

  galleries gallery[] @relation("StudentGalleryUploader")

  @@unique([login_id, phone])
}

model student_enrollments {
  id                Int      @id @default(autoincrement())
  student_id        Int
  class             Int
  roll              Int
  section           String   @db.Char(1)
  year              Int
  department        String?  @db.VarChar(100)
  fail_count        Int      @default(0)
  status            String   @default("Passed") @db.VarChar(100)
  final_merit       Int      @default(0)
  next_year_roll    Int      @default(0)
  next_year_section String?  @db.Char(1)
  created_at        DateTime @default(now())

  student students @relation(fields: [student_id], references: [id], onDelete: Cascade)
  marks   marks[]

  @@unique([student_id, class, year])
}

model attendence {
  id         Int      @id @default(autoincrement())
  student_id Int
  date       String   @db.VarChar(10)
  status     String
  send_msg   Boolean  @default(false)
  created_at DateTime @default(now())

  student students @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model exams {
  id           Int      @id @default(autoincrement())
  exam_name    String   @db.VarChar(100)
  exam_year    Int
  levels       Int[]
  routine      String?
  public_id    String? // Cloudinary public_id for routine PDF
  download_url String? // Download URL for routine PDF
  start_date   String   @db.VarChar(10)
  end_date     String   @db.VarChar(10)
  result_date  String   @db.VarChar(10)
  visible      Boolean  @default(false)
  created_at   DateTime @default(now())

  marks         marks[]
  exam_routines exam_routines[]

  @@unique([exam_name, exam_year, levels])
}

model holidays {
  id          Int      @id @default(autoincrement())
  title       String?
  start_date  String?  @db.VarChar(10)
  end_date    String?  @db.VarChar(10)
  description String?
  is_optional Boolean?
}

model teachers {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  email       String   @unique @db.VarChar(100)
  phone       String   @db.Char(11)
  designation String?  @db.VarChar(100)
  password    String
  image       String?
  address     String?
  available   Boolean  @default(true)
  created_at  DateTime @default(now())

  levels    levels[]
  subjects  subjects[]
  head_msgs head_msg[]
}

model staffs {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  email       String?  @unique @db.VarChar(100)
  phone       String   @db.Char(11)
  designation String?  @db.VarChar(100)
  image       String?
  address     String?
  created_at  DateTime @default(now())
}

model levels {
  id         Int    @id @default(autoincrement())
  class_name Int
  section    String @db.Char(1)
  year       Int
  teacher_id Int

  teacher teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
}

model subjects {
  id                  Int      @id @default(autoincrement())
  name                String   @db.VarChar(100)
  class               Int
  full_mark           Int      @default(0)
  pass_mark           Int      @default(0)
  cq_mark             Int      @default(0)
  mcq_mark            Int      @default(0)
  practical_mark      Int      @default(0)
  cq_pass_mark        Int      @default(0)
  mcq_pass_mark       Int      @default(0)
  practical_pass_mark Int      @default(0)
  year                Int      @default(dbgenerated("EXTRACT(year FROM CURRENT_DATE)"))
  teacher_id          Int?
  department          String?  @db.VarChar(100)
  created_at          DateTime @default(now())

  teacher teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  marks   marks[]

  @@unique([name, class, department, year])
}

model marks {
  id              Int      @id @default(autoincrement())
  enrollment_id   Int
  subject_id      Int
  exam_id         Int
  cq_marks        Int      @default(0)
  mcq_marks       Int      @default(0)
  practical_marks Int      @default(0)
  marks           Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  enrollment student_enrollments @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  subject    subjects            @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  exam       exams               @relation(fields: [exam_id], references: [id], onDelete: Cascade)

  @@unique([enrollment_id, subject_id, exam_id], name: "unique_marks_entry")
}

model gpa {
  id         Int      @id @default(autoincrement())
  student_id Int      @unique
  jsc_gpa    Float    @default(0)
  ssc_gpa    Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  student students @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model categories {
  id        Int     @id @default(autoincrement())
  category  String  @unique
  thumbnail String?

  galleries gallery[]
}

model events {
  id           Int      @id @default(autoincrement())
  title        String
  details      String?
  date         String   @db.VarChar(10)
  image        String?
  file         String?
  download_url String?
  category     String   @default("Event")
  location     String?
  thumbnail    String?
  public_id    String?
  created_at   DateTime @default(now())

  galleries gallery[]
}

model gallery {
  id            Int      @id @default(autoincrement())
  event_id      Int?
  category_id   Int?
  image_path    String?
  caption       String?
  status        String   @default("pending")
  uploader_id   Int?
  uploader_type String?
  created_at    DateTime @default(now())

  uploader students?   @relation("StudentGalleryUploader", fields: [uploader_id], references: [id], onDelete: Cascade)
  event    events?     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  category categories? @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model notices {
  id           Int      @id @default(autoincrement())
  title        String
  file         String?
  download_url String?
  public_id    String?
  created_at   DateTime @default(now())
}

model syllabus {
  id           Int      @id @default(autoincrement())
  class        Int
  year         Int
  pdf_url      String
  download_url String
  public_id    String
  created_at   DateTime @default(now())
}

model class_slot_time {
  id         Int             @id @default(autoincrement())
  start_time String          @db.VarChar(8) // "08:00 AM"
  end_time   String          @db.VarChar(8) // "01:00 PM"
  created_at DateTime        @default(now())
  routines   class_routine[]
}

model class_routine {
  id         Int      @id @default(autoincrement())
  class      Int
  slot_id    Int
  day        String   @db.VarChar(10)
  subject    String   @db.VarChar(100)
  created_at DateTime @default(now())

  slot class_slot_time @relation(fields: [slot_id], references: [id], onDelete: Cascade)

  @@unique([class, slot_id, day], name: "unique_class_slot_day")
}

model exam_routines {
  id         Int      @id @default(autoincrement())
  exam_id    Int
  class      Int
  date       String   @db.VarChar(10)
  day        String   @db.VarChar(10)
  subject    String   @db.VarChar(100)
  created_at DateTime @default(now())

  exam exams @relation(fields: [exam_id], references: [id], onDelete: Cascade)

  @@index([exam_id, class])
}

model class_routine_pdf {
  id           Int      @id @default(autoincrement())
  pdf_url      String
  download_url String
  public_id    String
  created_at   DateTime @default(now())
}

model CitizenCharter {
  id           Int      @id @default(autoincrement())
  file         String
  download_url String
  public_id    String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model head_msg {
  id           Int      @id @default(autoincrement())
  head_id      Int
  head_message String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  teacher teachers @relation(fields: [head_id], references: [id], onDelete: Cascade)
}

model ssc_reg {
  id                     Int      @id @default(autoincrement())
  reg_open               Boolean? @default(false)
  a_sec_roll             String?
  b_sec_roll             String?
  notice                 String?
  ssc_year               Int?
  instruction_for_a      String?  @default("Please follow the instructions carefully")
  instruction_for_b      String?  @default("Please follow the instructions carefully")
  attachment_instruction String?  @default("Please attach all required documents")
}

model student_registration_ssc {
  id                   String  @id @default(uuid())
  ssc_batch            String? @db.VarChar(4)
  // Personal Information
  section              String? @db.VarChar(10)
  roll                 String? @db.VarChar(20)
  religion             String? @db.VarChar(50)
  upobritti            String? @db.VarChar(10) // উপবৃত্তি (Yes/No)
  sorkari_brirti       String? @db.VarChar(20) // সরকারি বৃত্তি (Talentpool/General/No)
  student_name_bn      String? @db.VarChar(100)
  student_nick_name_bn String? @db.VarChar(50)
  student_name_en      String? @db.VarChar(100)
  birth_reg_no         String? @db.VarChar(17)

  // Parents Information
  father_name_bn String? @db.VarChar(100)
  father_name_en String? @db.VarChar(100)
  father_nid     String? @db.VarChar(17)
  father_phone   String? @db.VarChar(11)
  mother_name_bn String? @db.VarChar(100)
  mother_name_en String? @db.VarChar(100)
  mother_nid     String? @db.VarChar(17)
  mother_phone   String? @db.VarChar(11)

  // Birth Information
  birth_date  String? @db.VarChar(10)
  birth_year  String? @db.VarChar(4)
  birth_month String? @db.VarChar(2)
  birth_day   String? @db.VarChar(2)
  blood_group String? @db.VarChar(10)
  email       String? @db.VarChar(100)

  // Address Information
  present_district     String? @db.VarChar(50)
  present_upazila      String? @db.VarChar(50)
  present_post_office  String? @db.VarChar(100)
  present_post_code    String? @db.VarChar(4)
  present_village_road String? @db.VarChar(200)

  permanent_district     String? @db.VarChar(50)
  permanent_upazila      String? @db.VarChar(50)
  permanent_post_office  String? @db.VarChar(100)
  permanent_post_code    String? @db.VarChar(4)
  permanent_village_road String? @db.VarChar(200)

  // Guardian Information (optional)
  guardian_name         String? @db.VarChar(100)
  guardian_phone        String? @db.VarChar(11)
  guardian_relation     String? @db.VarChar(50)
  guardian_nid          String? @db.VarChar(17)
  guardian_district     String? @db.VarChar(50)
  guardian_upazila      String? @db.VarChar(50)
  guardian_post_office  String? @db.VarChar(100)
  guardian_post_code    String? @db.VarChar(4)
  guardian_village_road String? @db.VarChar(200)

  // Previous School Information
  prev_school_name     String? @db.VarChar(200)
  prev_school_district String? @db.VarChar(50)
  prev_school_upazila  String? @db.VarChar(50)

  // JSC Information
  jsc_passing_year String? @db.VarChar(4)
  jsc_board        String? @db.VarChar(50)
  jsc_reg_no       String? @db.VarChar(10)
  jsc_roll_no      String? @db.VarChar(20)

  // Class Nine Information
  group_class_nine String? @db.VarChar(50)
  main_subject     String? @db.VarChar(100)
  fourth_subject   String? @db.VarChar(100)

  // Photo Information
  photo_path String? @db.VarChar(255)

  // New field for nearby class nine student info
  nearby_nine_student_info String? @db.VarChar(200)

  // Status and Metadata
  status          String?   @default("pending") @db.VarChar(20) // pending, approved, rejected
  submission_date DateTime? @default(now())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Indexes for better query performance
  @@index([birth_reg_no])
  @@index([father_nid])
  @@index([mother_nid])
  @@index([status])
  @@index([submission_date])
}
